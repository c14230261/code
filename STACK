class Stack:
    def __init__(self):
        self.stack = []  # Inisialisasi stack sebagai list kosong

    # Method untuk menambahkan elemen ke dalam stack (push)
    def push(self, data):
        self.stack.append(data)  # Tambahkan elemen di akhir stack (top of the stack)

    # Method untuk menghapus elemen dari stack (pop)
    def pop(self):
        if not self.is_empty():
            return self.stack.pop()  # Hapus elemen terakhir (top of the stack)
        else:
            print("Stack is empty.")
            return None

    # Method untuk melihat elemen paling atas tanpa menghapusnya (peek)
    def peek(self):
        if not self.is_empty():
            return self.stack[-1]  # Kembalikan elemen terakhir (top of the stack)
        else:
            print("Stack is empty.")
            return None

    # Method untuk memeriksa apakah stack kosong
    def is_empty(self):
        return len(self.stack) == 0

    # Method untuk mendapatkan ukuran stack
    def size(self):
        return len(self.stack)

    # Method untuk menampilkan elemen-elemen dalam stack
    def display(self):
        if self.is_empty():
            print("Stack is empty.")
        else:
            print("Stack elements (from bottom to top):", " -> ".join(map(str, self.stack)))

# Contoh penggunaan Stack
if __name__ == "__main__":
    s = Stack()

    # Push beberapa elemen ke stack
    s.push(10)
    s.push(20)
    s.push(30)

    # Tampilkan elemen stack
    s.display()  # Output: Stack elements (from bottom to top): 10 -> 20 -> 30

    # Pop elemen dari stack
    print("Popped:", s.pop())  # Output: Popped: 30

    # Tampilkan elemen stack lagi
    s.display()  # Output: Stack elements (from bottom to top): 10 -> 20

    # Lihat elemen paling atas menggunakan peek
    print("Top element:", s.peek())  # Output: Top element: 20

    # Tampilkan ukuran stack
    print("Stack size:", s.size())  # Output: Stack size: 2
