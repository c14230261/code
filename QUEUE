class Queue:
    def __init__(self):
        self.queue = []  # Inisialisasi queue sebagai list kosong

    # Method untuk menambah elemen ke dalam queue (enqueue)
    def enqueue(self, data):
        self.queue.append(data)  # Tambahkan elemen di akhir queue

    # Method untuk menghapus elemen dari queue (dequeue)
    def dequeue(self):
        if not self.is_empty():
            return self.queue.pop(0)  # Hapus elemen pertama (depan queue)
        else:
            print("Queue is empty.")
            return None

    # Method untuk melihat elemen pertama dalam queue tanpa menghapusnya
    def peek(self):
        if not self.is_empty():
            return self.queue[0]  # Kembalikan elemen pertama
        else:
            print("Queue is empty.")
            return None

    # Method untuk memeriksa apakah queue kosong
    def is_empty(self):
        return len(self.queue) == 0

    # Method untuk mendapatkan panjang/ukuran queue
    def size(self):
        return len(self.queue)

    # Method untuk menampilkan elemen-elemen dalam queue
    def display(self):
        if self.is_empty():
            print("Queue is empty.")
        else:
            print("Queue elements:", " -> ".join(map(str, self.queue)))

# Contoh penggunaan Queue
if __name__ == "__main__":
    q = Queue()

    # Enqueue beberapa elemen
    q.enqueue(10)
    q.enqueue(20)
    q.enqueue(30)

    # Tampilkan elemen queue
    q.display()  # Output: Queue elements: 10 -> 20 -> 30

    # Dequeue elemen dari queue
    print("Dequeued:", q.dequeue())  # Output: Dequeued: 10

    # Tampilkan elemen queue lagi
    q.display()  # Output: Queue elements: 20 -> 30

    # Lihat elemen pertama menggunakan peek
    print("Front element:", q.peek())  # Output: Front element: 20

    # Tampilkan ukuran queue
    print("Queue size:", q.size())  # Output: Queue size: 2
