# Node class to represent each element of the linked list
class Node:
    def __init__(self, data=None):
        self.data = data  # Data stored in the node
        self.next = None  # Pointer to the next node in the list

# Single Linked List class
class SingleLinkedList:
    def __init__(self):
        self.head = None  # Head (or first) node of the list

    # Method to check if the list is empty
    def is_empty(self):
        return self.head is None

    # Method to add a node at the beginning of the list
    def add_at_start(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # Method to add a node at the end of the list
    def add_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:  # Traverse to the end of the list
                temp = temp.next
            temp.next = new_node

    # Method to display the list
    def display(self):
        if self.is_empty():
            print("The list is empty.")
        else:
            temp = self.head
            while temp:
                print(temp.data, end=" -> ")
                temp = temp.next
            print("None")

    # Method to delete the first node
    def delete_at_start(self):
        if self.is_empty():
            print("The list is empty, nothing to delete.")
        else:
            self.head = self.head.next

    # Method to delete the last node
    def delete_at_end(self):
        if self.is_empty():
            print("The list is empty, nothing to delete.")
        elif self.head.next is None:
            self.head = None  # Only one node in the list
        else:
            temp = self.head
            while temp.next.next:  # Traverse to the second last node
                temp = temp.next
            temp.next = None

    # Method to search for a value in the list
    def search(self, key):
        temp = self.head
        while temp:
            if temp.data == key:
                return True
            temp = temp.next
        return False

    # Method to get the length of the list
    def length(self):
        count = 0
        temp = self.head
        while temp:
            count += 1
            temp = temp.next
        return count

# Example of how to use the linked list
if __name__ == "__main__":
    sll = SingleLinkedList()

    # Adding elements
    sll.add_at_start(3)
    sll.add_at_start(2)
    sll.add_at_end(4)
    sll.add_at_end(5)

    # Display the list
    sll.display()  # Output: 2 -> 3 -> 4 -> 5 -> None

    # Delete the first and last nodes
    sll.delete_at_start()
    sll.delete_at_end()

    # Display the list again
    sll.display()  # Output: 3 -> 4 -> None

    # Search for an element
    print(sll.search(3))  # Output: True
    print(sll.search(6))  # Output: False

    # Get the length of the list
    print("Length of list:", sll.length())  # Output: Length of list: 2
